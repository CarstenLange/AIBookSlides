{
  "hash": "72d9f2cb6faf3cba41127e5f3d5d4383",
  "result": {
    "markdown": "---\ntitle: \"Intro to Machine Learning\"\nsubtitle: \"Types, Tasks, Terminology\"\nformat: \n  revealjs:\n    code-fold: true\n---\n\n\n## What is What? {auto-animate=true}\n\n-   Artificial Intelligence (AI),\n-   Machine Learning,\n-   Deep Learning\n-   Big Data\n\n## What is What? \n\n![Categorizing  AI, Machine Learning, and Deep Learning](Images/TypesOfAI1.png)\n\n## What is What? \n\n![Categorizing  AI, Machine Learning, and Deep Learning](Images/TypesOfAI2.png)\n\n## What is What? \n\n![Categorizing  AI, Machine Learning, and Deep Learning](Images/TypesOfAI3.png)\n\n## What About Big Data\n\n## What About Big Data\n\n-   Big Data is not a category of learning. It is a category of data!!!\n-   Two common definitions\n    -   Laymen: Many records (thousands?, millions?, billions?)\n    -   Experts: So many records that they do not fit in the memory of one computer.\n        -   At least billions of records.\n        -   Requires distributed computing.\n\n## Three Applications of Machine Learning {auto-animate=\"true\"}\n\n::: nonincremental\n-   Regression\n-   Classification\n-   Cluster\n:::\n\n## Three Applications of Machine Learning {.smaller auto-animate=\"true\"}\n\n::: nonincremental\n-   Regression\n    -   Outcome variable is continuous\n    -   We try to predict a numerical value\n-   Classification\n-   Cluster\n:::\n\n## Three Applications of Machine Learning {auto-animate=\"true\"}\n\n::: nonincremental\n-   Regression\n-   Classification\n-   Cluster\n:::\n\n## Three Applications of Machine Learning {.smaller auto-animate=\"true\"}\n\n::: nonincremental\n-   Regression\n-   Classification\n    -   Outcome variable is categorial\n    -   Most of the times 2 categories such as:\n        -   Yes/No\n        -   Red Wine/White Wine\n        -   True/False\n        -   often represented as dummies: 1/0\n    -   Sometimes more than two catogories (ordered or unordered):\n        -   good, fair, bad (ordered)\n        -   red, blue, green (unordered)\n        -   strongly agree, agree, disagree, strongly disagree (ordered)\n-   Cluster\n:::\n\n## Three Applications of Machine Learning {auto-animate=\"true\"}\n\n::: nonincremental\n-   Regression\n-   Classification\n-   Cluster\n:::\n\n## Three Applications of Machine Learning {.smaller auto-animate=\"true\"}\n\n::: nonincremental\n-   Regression\n-   Classification\n-   Cluster\n    -   Sorting observations into a number of groups based on feature variables.\n    -   Groups are as homogenous inside as possible.\n    -   Groups are as diverse between groups (when comparing groups)\n:::\n\n## Three Applications of Machine Learning {auto-animate=\"true\"}\n\n::: nonincremental\n-   Regression\n-   Classification\n-   Cluster\n:::\n\n## Terminolgy {.smaller}\n\nFirst 3 Observations (records) of the Housing Dataset (to predict house prices)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rio);library(tidyverse)\nDataHousing =\n  import(\"https://lange-analytics.com/AIBook/Data/HousingData.csv\") %>% \n  select(Price=price, Sqft=sqft_living, Bedrooms=bedrooms,Waterfront=waterfront)\nprint(DataHousing[1:3,])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Price Sqft Bedrooms Waterfront\n1 221900 1180        3         no\n2 538000 2570        3         no\n3 180000  770        2         no\n```\n:::\n:::\n\n\nTidy data:\n\n-   Observations (synonym: records) are in the rows.\n-   Variables (synonym: features) are in the columns.\n-   Variable names (column names) are in the first row.\n-   Data are in individual cells (and they form vectors; column names can be interpreted as vector names).\n\n## Terminolgy {.smaller}\n\n::: panel-tabset\n### Main\n\nFirst 3 Observations (records) of the Housing Dataset (predict house prices)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rio);library(tidyverse)\nDataHousing =\n  import(\"https://lange-analytics.com/AIBook/Data/HousingData.csv\") %>% \n  select(Price=price, Sqft=sqft_living, Bedrooms=bedrooms,Waterfront=waterfront)\nprint(DataHousing[1:3,])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Price Sqft Bedrooms Waterfront\n1 221900 1180        3         no\n2 538000 2570        3         no\n3 180000  770        2         no\n```\n:::\n:::\n\n\n-   **Outcome Variable**: The variables that is the outcome of the prediction ($Price$)\n\n-   **Predictor Variables**: The variables that **predict** an outcome ($Sqft$, $Bedrooms$, $Waterfront$)\n\n-   **Example linear regression:** \n\n    $$Price=\\beta_1 \\cdot Sqft+ \\beta_2 \\cdot Bedrooms +\\beta_3 \\cdot Waterfront+\\beta_4$$\n\n\n### Synonyms\n\n::: nonincremental\n\n-   **Synonyms for Outcome Variable:**\n\n    -   Response variable (it responds to the predictors)\n    -   Dependent variable (it is dependent on the predictors)\n    -   Endogenous variable (it is dependent on the predictors)\n\n-   **Synonyms for Predictor Variables:**\n\n    -   Explanatory variables variables (they explain the outcome)\n    -   Independent variables (they are chosen independently to see how they impact the outcome)\n    -   Exogenous variable (exogenous: outside of the model)\n\n:::\n\n:::\n\n## Prediction\n\n**Predicting** means that we use the values for one or more known variables to estimate an *outcome*. Predictions can be forecasts or for the same time period. \n\n::: nonincremental\n- Predict tomorrow's weather based on today's barometric change of pressure.\n- Predict the price of a house (today) based on it's square footage (today). \n:::\n\nVariables that are based on a prediction are marked with a *hat* (e.g.,  $\\widehat{Price_i}$).\n\n\n## Model {.smaller}\n\nA *model* is what we use for predicting an outcome variable based on values of predictor variables --- given certain assumptions. \n\n\n\n$$\\widehat{Price_i}=\\beta_1 Sqft_i + \\beta_2$$\n\n\n    \n## Fitted Model {.smaller}\n\nCan we use the model from the previous slide to predict the price of a house, if we know the value for the house's predictor variable (e.g., $Sft=1000$)? \n\nOnly if we know the values for the parameters (the $\\beta's$)!\n\nSuppose OLS  based on data determines that $\\beta_1=300$ andt $\\beta_2=500,000$: \n\n\n$$\\widehat{Price_i}=300 Sqft_i + 500000$$\n\n\nA model where the parameters (the $\\beta's$) have been determined by a machine learning algorithm is called a **fitted model**.\n    \n**A fitted model can be used for predictions.**  E.g., a house with a square footage of 1,000 sqft is predicted to cost $8000,000. \n\n- In our case: \n    \n\n    $$\\widehat{Price_i}=300 \\cdot 1,000 + 500,000= 800,000$$\n\n\n## Parameters\n  The $\\beta s$ of a model are the parameters. The parameters are determined by the optimizer of a machine learning algorithm. \n  \n  Machine learning can be (over)simplified to the following steps:\n  \n  1. Determine the model including the $\\beta s$. \n  \n  2. Use machine learning to determine the $\\beta s$ and therefore create a *fitted model*.\n  \n  3. Use the fitted model o predict based on *predictor variables*.\n\n## Training vs. Testing Data\n\n**Training Dataset**\n\nWhen using data to calibrate the parameters minimizing some type of prediction error (training the model), most but not all of the observations are used. \n\n. . . \n\nOnly about 60% – 90% of the total observations are usually used to calibrate the parameters (the $\\beta s$ of the model). These observations  are randomly chosen and the resulting dataset is called the **training dataset**.\n\n## Training vs. Testing Data\n\n**Testing  Dataset**\n\nObservations not randomly chosen for training  makeup the **testing dataset**. Testing data are never used to optimize model performance in any way! Instead, they form a hold-out dataset used to assess the predictive quality of a model. \n\n. . . \n\nUsing the training dataset for this purpose is not an option because we would measure how well the model approximates the training data rather than assessing the predictive quality on new data — data that the model never has seen before \n    \n## Why Using R for Machine Learning?\n\nMachine Learning Software\n\n- R (free, advanced, timely delivery of new algorithms, easy to use with the `tidyverse` and `tidymodels` packages)\n- Phython ((free, advanced, often first delivery of new algorithms, not as easy to use because it is a programming language rather then a statistical language)\n- SAS (not free, somehow advanced, slow in delivering new algorithms, easy to use)\n- Stata (not free, somehow advanced, slow in delivering new algorithms, easy to use)\n- SPSS (not free, not advanced, slow in delivering new algorithms, optimized for survey processing, extremely easy to use)\n\n## Your questions",
    "supporting": [
      "MLIntro_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}