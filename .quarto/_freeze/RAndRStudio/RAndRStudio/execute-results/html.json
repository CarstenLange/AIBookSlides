{
  "hash": "6f705b8072749e5fd8275bf8f096bca0",
  "result": {
    "markdown": "---\ntitle: \"Introduction to R and RStudio\"\nsubtitle: Folow along in RStudio\n\nformat: revealjs\n---\n\n\n## Learning Outcomes\n\nWhat you will learn in this session:\n\n-   How to install R and RStudio\n-   What is the windows layout of RStudio\n-   How to setup RStudio\n-   How to create a project (folder) in RStudio\n-   How to use major functionalities of RStudio\n-   How to extend R's functionality with R-packages\n-   Which packages you should install for this book\n\n## Install and Setup R and RStudio\n\nA typical setup to work with R consists of two components:\n\n::: nonincremental\n-   the **R Console** which executes R code and\n\n-   an integrated development environment (IDE) such as **RStudio**.\n:::\n\nYou can download R here: [Download R](https://cran.r-project.org/bin/)\n\nYou can download RStudio here: [Download RStudio](https://www.rstudio.com/products/rstudio/download/#download)\n\nDetailed installation guides are provided in the Book and the Online Resources sections of this chapter in book.\n\n## RStudio --- Integrated Development Environment (IDE) for R\n\n![RStudio Window](Images/RAndRStudioWindow.PNG)\n\n## Recommended RStudio Settings\n\n1.**Do not Restore .RData into workspace at startup:**\\\n`Tools -> GlobalOptions`.\n\n2.  **Work with R Projects:** This assigns a directory on your hard drive to your R analysis: `File -> New Project`\n\n::: footer\nSee: [RandRStudioScript.R script100](https://lange-analytics.com/AIBook/Scripts/RAndRStudioScript.R)\n:::\n\n## R Packages {.smaller}\n\nR Packages extend R's functionality. They have to be **installed** only once:\n\n`Tools -> Install Packages ...`\n\nAfter installation they need to be **loaded** in every new R script with `library()`.\n\nPackages frequently used in this course (**please install soon**):\n\n-   `tidyverse`: supports easy data processing .\n-   `rio`: allows loading various data resources with one `import()` command from the user's hard drive or the Internet.\n-   `janitor`: provides functionality to clean data and rename variable names to avoid spaces and special characters.\n-   `tidymodels`: streamlines data engineering and machine learning tasks.\n-   `kableExtra`: supports rendering tables in HTML.\n-   `shiny`: needed together with the `learnr` package for the interactive exercises in the book.\n-   `learnr` package: together with the `shiny` package for the interactive exercises in the book.\n\n## Example: the `rio` and the `tidyverse` Package\n\nAssuming the `rio` packages is already installed.\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nlibrary(rio);library(tidyverse)\nDataHousing =\n  import(\"https://lange-analytics.com/AIBook/Data/HousingData.csv\") %>% \n  select(Price=price, Sqft=sqft_living, Bedrooms=bedrooms,Waterfront=waterfront)\nprint(DataHousing[1:3,])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Price Sqft Bedrooms Waterfront\n1 221900 1180        3         no\n2 538000 2570        3         no\n3 180000  770        2         no\n```\n:::\n:::\n\n\n`import()` would not work if the `rio` package were not loaded.\n\n`select()` would not work if the `tidyverse` package were not loaded.\n\n## Data Types & Data Objects\n\n::: nonincremental\n-   **Data Types:** What can R store?\n\n    -   numerical `num`\n    -   character `chr`\n    -   `factor`\n    -   `logic`\n\n-   **Data Objects:** What are the **containers** R uses to store data?\n\n    -   single entry \\*single entry variable\\`\n    -   list of entries `vectors`\n    -   table `dataframe` and `tibble`\n    -   *advanced objects*. E.g., for plot, models, prediction results\n:::\n\n\n## Data Types {.scrollable .smaller}\n\n::: panel-tabset\n### Main\n\n**Numerical Data Type (`num`):** Numerical values (e.g., 1, 523, 3.45) are used for calculation. In contrast, ZIP-Codes are not numerical data type.\n\n**Character Data Type (`chr`):** Storing sequence of characters, numbers, and/or symbols to form a word or even a sentence is called a `character` data type (e.g. first or last names, street addresses, or Zip-codes)\n\n**Factor Data Type (`factor`):** A `factor` is an R data type that stores *categorical* data in an effective way. `factor` data types are also required by many classification models in R.\n\n**Logic Data Type(`logic`):** A data type that stores the logic states `TRUE` and `FALSE` is called a `logic` object (sometimes called Boolean)\n\n### Numerical\n\n**Numerical Data Type (`num`):** Numerical values are used for calculations (therefore ZIP-Codes are not numerical). Numerical data can be discrete (`integer`) or continuous (`double`).\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nA=as.integer(2)\nB=as.integer(3)\nstr(A) # str() returns structure of a variable\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n int 2\n```\n:::\n\n```{.r .cell-code}\nC=1.23\nstr(C) # str() returns structure of a variable\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num 1.23\n```\n:::\n\n```{.r .cell-code}\nprint(A*C)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.46\n```\n:::\n\n```{.r .cell-code}\nA^B\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\nA/B # Returns num type\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6666667\n```\n:::\n:::\n\n\n### Character\n\n**Character Data Type (`chr`):**\n\nNote that what is called a `character` in R is often called a *string* in other programming languages.\n\n`character` data types must be surrounded by quotes:\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nMyText=\"Hello world!\"\nprint(MyText)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello world!\"\n```\n:::\n:::\n\n\nCharacter variables can be concatenated with the `cat()` command:\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nFirstName=\"Carsten\"\nLastName=\"Lange\"\ncat(FirstName, LastName) # R adds a space automatically\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCarsten Lange\n```\n:::\n:::\n\n\n### Factor\n\nA `factor` is an R data type that stores *categorical* data in an effective way. *Categorical* data are `character` type data covering a few categories such as hair color (blonde, braun, red, black). They can be coded with numbers (e.g., from 1-5 for hair color) and thus use less memory. Another example is sex (male, female).\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 Ã— 2\n  Name  Sex   \n  <chr> <chr> \n1 John  male  \n2 Jane  female\n3 Mia   female\n4 Brid  female\n5 Greg  male  \n```\n:::\n:::\n\n\nSex is a `charcter` variable in the dataset `People`\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nstr(People$Sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:5] \"male\" \"female\" \"female\" \"female\" \"male\"\n```\n:::\n:::\n\n\nTransforming the variable $Sex$ to a factor and looking at its structure (`str()`) again:\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nstr(as.factor(People$Sex))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Factor w/ 2 levels \"female\",\"male\": 2 1 1 1 2\n```\n:::\n:::\n\n\n### Logic\n\n**Logic variables**: Store `TRUE` and `FALSE`. They can be combined with `and`/`or`. Internally `True` is stored as $1$ and `False` is stored as $0$\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nIsConcertGood=FALSE \nIsCompanyGood=TRUE\ncat(\"Is the concert good?\", IsConcertGood, \"Is the company good?\", IsCompanyGood)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIs the concert good? FALSE Is the company good? TRUE\n```\n:::\n:::\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nIsEveningAmazing=IsConcertGood & IsCompanyGood\ncat(\"Is the evening amazing?\", IsEveningAmazing)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIs the evening amazing? FALSE\n```\n:::\n:::\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nIsEveningGood=IsConcertGood | IsCompanyGood # | stands for \"or\"\ncat(\"Is the evening good?\", IsEveningGood)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIs the evening good? TRUE\n```\n:::\n:::\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nIsConcertGood+IsCompanyGood+17\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 18\n```\n:::\n:::\n\n\n### Truth Table\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption>Truth Table for AND and OR</caption>\n <thead>\n<tr>\n<th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"1\"><div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \">R object A</div></th>\n<th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"1\"><div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \">R object B</div></th>\n<th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"1\"><div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \">A and B</div></th>\n<th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"1\"><div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \">A or B</div></th>\n</tr>\n  <tr>\n   <th style=\"text-align:left;\"> A </th>\n   <th style=\"text-align:left;\"> B </th>\n   <th style=\"text-align:left;\"> A&amp;B </th>\n   <th style=\"text-align:left;\"> A|B </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> TRUE </td>\n   <td style=\"text-align:left;\"> TRUE </td>\n   <td style=\"text-align:left;\"> TRUE </td>\n   <td style=\"text-align:left;\"> TRUE </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> TRUE </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n   <td style=\"text-align:left;\"> TRUE </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> FALSE </td>\n   <td style=\"text-align:left;\"> TRUE </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n   <td style=\"text-align:left;\"> TRUE </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> FALSE </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n:::\n\n::: footer\nSee: [RandRStudioScript.R script200](https://lange-analytics.com/AIBook/Scripts/RAndRStudioScript.R)\n:::\n\n## Data Types & Data Objects\n\n**Data Types:** What can R store?\n\n**Data Objects:** What are the containers R uses to store data?\n",
    "supporting": [
      "RAndRStudio_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"RAndRStudio_files/libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"RAndRStudio_files/libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ],
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}