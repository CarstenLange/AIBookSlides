---
title: "Linear Regression"
subtitle: "Multivariate"
format: 
  revealjs:
    multiplex: true
    code-fold: false
    scrollable: true
    incremental: false
    echo: true
---



## What Will You Learn {.scrollable .smaller}



-   Motivation for multivariate regression

    -   Prediction of outcome (include all predictors you have data for)
    -   Impact Analysis
    -   Impact of one predictor but controlled for other predictors
    
- Digital Acylical Graph (DAG) as a reflection of domain knowledge

- Data Engineering

- Exploratory data analysis

-   How to extend univariate regression to multivariate regression in *R*

-   Interpretation of standard error, t-value, and P-value to infer on prediction quality

## Three Motivations to perform Multivariate Regression

**Prediction only:**   
    Only trying to get the best prediction of an outcome --- no interpretation of predictor impact (include all predictors that are relevant regardless of interaction effects)

**Impact Analysis:** 
    Analyzing and quantifying the impact of many predictors. Leads to high requirements for statistical methods.

**Impact of one predictor:** 
    Often performed in marketing, medicine, and pharma research as an extension of A/B testing.

## Example: Sex Discrimination (Impact of one Predictor)
### Univariate with SexFem only

```{r}
#| echo: false

library(tidymodels)
library(janitor)
library(wooldridge)

DataOrg=wage1 
head(DataOrg)
```
Use ? wage1 to learn more about the data.

## Example: Sex Discrimination (Impact of one Predictor) {.smaller}
### Univariate with SexFem only

**Can we trust a univariate regression with only $SexFem$ ???**

For example, education, tenure, experience etc. also influence $Wage$?

```{r}
library(wooldridge)
DataOrg=wage1 
DataOrgUpperCase=DataOrg |> 
         clean_names("upper_camel") |>  
         rename(LogWage=Lwage, SexFem=Female)
ModelSexOnly=lm(LogWage~SexFem, DataOrgUpperCase)
summary(ModelSexOnly)
```



## Which Independent Variables Should we Choose? {.smaller}

**Choosing as many as possible is a bad idea!!!**

Also, we better don't use  $Wage$ on $LogWage$. 

```{r}
#| echo: false
ggplot(DataOrgUpperCase, aes(x=Wage, y=LogWage))+
  geom_point()
```
```{r}
#| code-fold: true
lm(LogWage~Wage, data=DataOrgUpperCase) |> summary()
```




## Which Independent Variables Should we Choose?


**If choosing all variables is a bad idea, we need a procedure to choose independent variables (predictors)!**

**Plan and think before you run a regression**

## Step 1: Use Domain Knowledge (beliefs)

*Directed Acylical Graphs (DAG's)* can help to structure our beliefs.

**Incomplete DAG**
```{r}
#| code-fold: true
library(ggdag)
set.seed(123)
dagify(Wage~SexFem+Ten+Educ+Exp+Talent+SglPar,
       SglPar~SexFem,
       outcome = "Wage",
       exposure = "SexFem"
      ) |> 
ggdag_status(node_size = 22) + theme_void()
```





 

## Step 1: Your Turn

Copy the code and make your own DAG:





## Step 1: Use Domain Knowledge (beliefs)

Based on the DAG decide which variables are candidates and include only these candidates in your analytics data frame  I have done this already:

```{r}
#| code-line-numbers: "1-6|7-11"
DataWage=DataOrgUpperCase |> 
         clean_names("upper_camel") |> 
         select(Wage, LogWage, SexFem, Educ,
           Exp=Exper, Exp2=Expersq,Ten=Tenure, Ten2=Tenursq,
           NonWhite=Nonwhite, MarTrue=Married, 
           NumChild=Numdep, MsaTrue=Smsa)
# Sabotaging the Dataset for Educational Purpose
DataWage[1,4]=NA; DataWage[2:3,5]=NA; 
DataWage[4,9]=NA; DataWage[5,3]=NA;
DataWage[8,2]=NA; DataWage[2,1]=NA;
DataWage[2,2]=NA;

```



## Step 2: Data Engeneering (reparing and creating variables){.smaller} 
### First 10 Observasions of Damaged Dataset

```{r}
#| code-fold: true
head(DataWage, n=10)
```


## Step 2: Data Engeneering (reparing and creating variables)
### Impute Educ with Mean

We use the *recipe* command from the *tidymodels* package. A recipe are just instructions (similar than a recipe in a cookbook) on how to manipulate the data. The *recipe* will get executed later on.
```{r}
RecipeWageSex=recipe(DataWage) |> 
              step_impute_mean(Educ)
```

::: {.fragment}
```{r}
#| code-fold: true
head(RecipeWageSex |> prep() |> juice())
```
:::

## Step 2: Data Engeneering (reparing and creating variables)
### Impute Exp with Median
```{r}
#| code-line-numbers: "3"
RecipeWageSex=recipe(DataWage) |> 
              step_impute_mean(Educ) |>
              step_impute_median(Exp)
              
```

::: {.fragment}
```{r}
#| code-fold: true
head(RecipeWageSex |> prep() |> juice())
```
:::

## Step 2: Data Engeneering (reparing and creating variables)
### Impute NonWhite with Mode
```{r}
#| code-line-numbers: "4-6"
RecipeWageSex=recipe(DataWage) |> 
              step_impute_mean(Educ) |>
              step_impute_median(Exp) |> 
              step_mutate(NonWhite=as.character(NonWhite)) |> 
              step_impute_mode(NonWhite) |> 
              step_mutate(NonWhite=as.numeric(NonWhite))
```

::: {.fragment}
```{r}
#| code-fold: true
head(RecipeWageSex |> prep() |> juice())
```
:::

## Step 2: Data Engeneering (reparing and creating variables)
### Impute SexFem with k=Nearest Neighbors (k=1)
```{r}
#| code-line-numbers: "7"
RecipeWageSex=recipe(DataWage) |> 
              step_impute_mean(Educ)|>
              step_impute_median(Exp) |> 
              step_mutate(NonWhite=as.character(NonWhite)) |> 
              step_impute_mode(NonWhite) |> 
              step_mutate(NonWhite=as.numeric(NonWhite)) |> 
              step_impute_knn(SexFem)
```

::: {.fragment}
```{r}
#| code-fold: true
head(RecipeWageSex |> prep() |> juice())
```
:::


## Step 2: Data Engeneering (reparing and creating variables)
### Remove observation with missing wage.

```{r}
#| code-line-numbers: "8"
RecipeWageSex=recipe(DataWage) |> 
              step_impute_mean(Educ)|>
              step_impute_median(Exp) |>   
              step_mutate(NonWhite=as.character(NonWhite)) |> 
              step_impute_mode(NonWhite) |> 
              step_mutate(NonWhite=as.numeric(NonWhite)) |> 
              step_impute_knn(SexFem) |> 
              step_naomit(everything())
```

::: {.fragment}
```{r}
#| code-fold: true
head(RecipeWageSex |> prep() |> juice())
```
:::

## Step 2: Data Engeneering (reparing and creating variables)
### Data Engineer a new variable (SglPar)

```{r}
#| code-line-numbers: "9"
RecipeWageSex=recipe(DataWage) |> 
              step_impute_mean(Educ)|>
              step_impute_median(Exp) |>   
              step_mutate(NonWhite=as.character(NonWhite)) |> 
              step_impute_mode(NonWhite) |> 
              step_mutate(NonWhite=as.numeric(NonWhite)) |> 
              step_impute_knn(SexFem) |> 
              step_naomit(everything()) |> 
              step_mutate(SglPar=ifelse(MarTrue==0 & NumChild>0,1,0))
```

::: {.fragment}
```{r}
#| code-fold: true
DataWageClean=RecipeWageSex |> prep() |> juice()
head(DataWageClean)
```
:::
##  Step 3: Exploratory Data Analysis with SmartEDA

You need to install the `SmartEDA` package first.

```{r}
#| echo: true
#| eval: false
library(SmartEDA)
#ExpReport(DataWageClean, op_file = "EDAReport")
```

[EDAReport.html](EDAReport.html)

## Step 3: Exploratory Data Analysis  with cor


The pair-wise correlation between so many variables in the plots of the *EDA Report* was difficult to read. A Correlation Matrix shows correlation in a more compact way (NA observations are a problem):

```{r}
#| code-fold: true
library(corrplot)
CorMatrix=cor(DataWageClean)

corrplot(CorMatrix, method = 'shade', type = 'full', 
         addCoef.col ='black', number.cex = 0.7, order = 'original', diag=FALSE)
corrplot(CorMatrix, order="original")
```







## Step 4: Select Resonable Predictors and Try Regression {.smaller}
### Try it yourself, copy the code

```{r}
#| eval: false
library(tidymodels)
library(janitor)
library(wooldridge)
library(corrplot)
library(SmartEDA)
DataWage=wage1 |> 
         clean_names("upper_camel") |> 
         select(Wage, SexFem=Female, Educ,Exp=Exper,Ten=Tenure,      
                NonWhite=Nonwhite,SexFem=Female,                   
                MarTrue=Married, NumChild=Numdep, MsaTrue=Smsa) |> 
          mutate(SnglPar=ifelse(MarTrue==0 & NumChild>0,1,0))

ExpReport(DataWage, op_file = "EDAReport")

CorMatrix=cor(DataWage)
corrplot(CorMatrix)

ModelMine=lm(~,data = )

summary(ModelMine)
```