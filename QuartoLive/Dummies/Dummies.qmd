---
title: "Qualitative Independent Variables (Dummy Variables)"
subtitle: "Regression, Dummies, One-Hot Encoding, AB-Tests"
author:
  name: "Carsten Lange"
  email: "clange@cpp.edu"
  affiliation: "Cal Poly, Pomona"

execute:
  message: false
  warning: false

format: 
  live-revealjs:
    theme: [moon,../../CustomCL.scss]
    controls: true
    chalkboard:
      theme: whiteboard
      boardmarker-width: 2.7
    incremental: false
    scrollable: true
    footer: "<a href='https://ai.lange-analytics.com/htmlbook/LinRegr.html'>Textbook </a> "
webr:
  packages:
    - tidyverse
    - rio
    - plotly
    - janitor
    
resources: 
  - Data
engine: knitr    
---




## What Will You Learn {.scrollable .smaller}

```{r}
#| echo: false
library(tidymodels)
library(rio)
library(kableExtra)
library(janitor)
```


-   Understanding how categorical data with two categories such as the sex of a person (female/male) can be transformed into numerical dummy variable

-   Understanding how categorical data with three or more categories such as the gender of a person (female/male/non-binary) can be transformed into numerical dummy variable

-   Being able to distinguish between dummy encoding and one-hot encoding

- t-Tests vs. Univariate Regression with Dummies




## Dummy and One-Hot Encoding for Real Estate Data 

**One-Hot Encoding Example:** Houses **are** or **are not** at the Waterfront

```{r}
#| code-fold: true
OneHotTable=tibble(Waterfront_yes=c(0,0,1,0),Waterfront_no=c(1,1,0,1))
print(OneHotTable)
```

*One-hot* encoding is easier to interpret but causes problems in OLS (dummy trap) because one variable is redundant. We can calculate one variable from the other (*perfect multicollinearity)*:

$$Waterfront_{yes}=1-Waterfront_{no}$$ 
»

## Dummy and One-Hot Encoding {.smaller}

**Dummy Enoding**

We use one variable less than we have categories. Waterfront has two categories. Therefore, we use one variable (e.g., `Waterfront_yes`):

**Dummy Encoding Example**

```{r}
#| code-fold: true
DummyTable=tibble(Waterfront_yes=c(0,0,1,0))
print(DummyTable)
```

»

## Dummy Encoding: Gender Based  vs. Sex Based {.smaller}

**Gender Based (`GenderFem`, `GenderMale`, `GenderNonBin`)**

::: {.incremental}
- we have 3 categories and need to leave one out
- the left out one is the reference (mathemtically is does not matter which)
- leaving out `GenderMale` is likely a good choice:
  - coding gender female: `GenderFem=1`,`GenderNonBin=0`
  - coding gender non-binary: `GenderFem=0`,`GenderNonBin=1`
  - coding gender male: `GenderFem=0`,`GenderNonBin=0`
  - interpretation: 
    - a negative regression coeff. for `GenderFem` shows how much less *females* make compared to the reference *male*
    - a negative regression coeff. for `GenderNonBin` shows how much less *non-binary* people make compared to the reference *male*
:::

## Dummy Encoding: Gender Based  vs. Sex Based 

**Sex Based (`SexFem`, `SexMale`)**

::: {.incremental}
- we have 2 categories and need to leave one out
- the left out one is the reference (mathematically is does not matter which)
- leaving out `SexMale`:
  - coding female: `SexFem=1`, coding male: `SexFem=0`
  - interpretation: <br>
      a negative regression coeff. for `SexFem` shows how much less *females* make compared to the reference *male*

- leaving out `SexFemale`:
  - coding female: `SexMale=0`, coding male: `SexMale=1`
  - interpretation: <br>
      a positive regression coeff. for `SexMale` shows how much more *males* make compared to the reference *females*
:::

## Sex Based Wage Discrimination (univariate)

```{r}
#| echo: true
library(wooldridge)
library(janitor)
DataWage=wage1 |>  
clean_names("upper_camel")  |> 
select(Wage, SexFem=Female) |> 
mutate(SexMale=ifelse(SexFem==0,1,0))
head(DataWage)
```

## Plotting the Data

```{r}
#| code-fold: true
library(tidyverse)
DataWageFem=filter(DataWage, SexFem==1)
MeanWageFem=mean(DataWageFem$Wage)
DataWageMale=filter(DataWage, SexMale==1)
MeanWageMale=mean(DataWageMale$Wage)
ggplot(DataWage, aes(x=SexFem, y=Wage))+
  geom_point() +
  geom_point(aes(x=c(0), y=c(MeanWageMale)), size=3, color="blue" )+
  geom_point(aes(x=c(1), y=c(MeanWageFem)), size=3, color="red" )
```


## Plotting the Data with Transparency (alpha) and Jittered

```{r}
#| code-fold: true
library(tidyverse)
ggplot(DataWage, aes(x=SexFem, y=Wage))+
  geom_jitter(width=0.05, alpha=0.27)+
  geom_point(aes(x=c(0), y=c(MeanWageMale)), size=3, color="blue" )+
  geom_point(aes(x=c(1), y=c(MeanWageFem)), size=3, color="red" )
```



## Plotting the Data with Regression Line

```{r}
#| code-fold: true
library(tidyverse)
ggplot(DataWage, aes(x=SexFem, y=Wage))+
  geom_jitter(width=0.05, alpha=0.27)+
  geom_smooth(method = "lm", se=FALSE, color="black")+
  geom_point(aes(x=c(0), y=c(MeanWageMale)), size=3, color="blue" )+
  geom_point(aes(x=c(1), y=c(MeanWageFem)), size=3, color="red" )
```


## Plotting the Data with Regression Line using SexMale Rather Than SexFem

```{r}
#| code-fold: true
library(tidyverse)
ggplot(DataWage, aes(x=SexMale, y=Wage))+
  geom_jitter(width=0.05, alpha=0.27)+
  geom_smooth(method = "lm", se=FALSE, color="black")+
  geom_point(aes(x=c(0), y=c(MeanWageFem)), size=3, color="red")+
  geom_point(aes(x=c(1), y=c(MeanWageMale)), size=3, color="blue")
```


## Sex Discrimination

### Regression (male left-out)
```{r}
#| echo: true
lm(Wage ~ SexFem, data=DataWage)
```


### Comparing Means as in 2-Sample-t-Tests

```{r}
#| code-fold: true
DataWageFem=filter(DataWage, SexFem==1)
MeanWageFem=mean(DataWageFem$Wage)
cat("Avg. female wage:",MeanWageFem)
```

```{r}
#| code-fold: true
DataWageMale=filter(DataWage, SexFem==0)
MeanWageMale=mean(DataWageMale$Wage)
cat("Avg. male wage:",MeanWageMale)
```

```{r}
#| code-fold: true
cat("Difference between female and male Wage avg.:",MeanWageFem-MeanWageMale)
```

### Regression (female left-out)
```{r}
#| echo: true
lm(Wage ~ SexMale, data=DataWage)
```


### Comparing Means as in 2-Sample-t-Tests

```{r}
#| code-fold: true
DataWageMale=filter(DataWage, SexFem==0)
MeanWageMale=mean(DataWageMale$Wage)
cat("Avg. male wage:",MeanWageMale)
```

```{r}
#| code-fold: true
DataWageFem=filter(DataWage, SexFem==1)
MeanWageFem=mean(DataWageFem$Wage)
cat("Avg. female wage:",MeanWageFem)
```

```{r}
#| code-fold: true
cat("Difference between female and male Wage avg.:",MeanWageMale-MeanWageFem)
```
