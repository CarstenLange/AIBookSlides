---
title: "Introduction to R and RStudio" 
author:
  name: "Carsten Lange"
  email: "clange@cpp.edu"
  affiliation: "Cal Poly, Pomona"

execute:
  message: false
  warning: false

format: 
  live-revealjs:
    theme: [moon,../../CustomCL.scss]
    warning: false
    controls: true
    chalkboard:
      theme: whiteboard
      boardmarker-width: 2.7
    incremental: false
    scrollable: true
    footer: "<a href='https://ai.lange-analytics.com/htmlbook/RAndRStudio.html'>Textbook </a> "
webr:
  packages:
    - tidyverse
    - rio
    - ggdag
    
resources: 
  - Data
engine: knitr    
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}

## Learning Outcomes {.smaller}

```{webr}
#| echo: false
DataTitanic=import("Data/Titanic.csv") |> 
  select(-Name, -SiblingsSpousesAboard, -ParentsChildrenAboard)
```


-   How to install R and RStudio
-   What is the windows layout of RStudio
-   How to setup RStudio
-   How to create a project (folder) in RStudio
-   How to use major functionality of RStudio
-   How to extend R's functionality with R-packages
-   Which packages you should install for this book
-   Data types and data objects in R
-   The Structure of R commands
-   About the `tidyverse` package for data frames
    -   `select()` and rename columns (variables)
    -   `filter()` rows (observations)
    -   `mutate()` (define columns (variables); overwrite old or create new)
    -   `arrange()` sort observations in a data frame.
    -   piping (connecting commands) with `|>`.

## Install and Setup R and RStudio {.smaller}

A typical setup to work with R consists of two components:

::: nonincremental
-   the **R Console** which executes R code and

-   an integrated development environment (IDE) such as **RStudio**.
:::

You can download R here: [Download R](https://cran.r-project.org/bin/){target="_blank"}

You can download RStudio here: [Download RStudio](https://www.rstudio.com/products/rstudio/download/#download){target="_blank"}

Detailed installation guides are provided in the Book and the Online Resources sections of this chapter in book.

## RStudio --- Integrated Development Environment (IDE) ðŸ¤“  {.smaller}

![RStudio Window](Images/RAndRStudioWindow.PNG)

First steps to setup R can be found in this video: [Click here](https://youtu.be/LmRtTkD5E6M)

::: footer
See: [RandRStudioScriptPart1.R script100](https://econ.lange-analytics.com/RScripts/RAndRStudioScriptPart1.R){target="_blank"}
:::

## Recommended RStudio Settings  {.smaller}

1.**Do not Restore .RData into workspace at startup:**\
`Tools -> GlobalOptions`.

2.  **Work with R Projects:** This assigns a directory on your hard drive to your R analysis: `File -> New Project`

First steps to setup R can be found in this video: [Click here](https://youtu.be/LmRtTkD5E6M){target="_blank"}

## R Packages {.smaller}

R Packages extend R's functionality. They have to be **installed** only once:

`Tools -> Install Packages ...`

After installation they need to be **loaded** in every new R script with `library()`.

Packages frequently used in this course (**please install soon**):

-   `tidyverse`: supports easy data processing .
-   `rio`: allows loading various data resources with one `import()` command from the user's hard drive or the Internet.
-   `janitor`: provides functionality to clean data and rename variable names to avoid spaces and special characters.

## Example: the `rio` and the `tidyverse` Package {.smaller}

Assuming the `rio` packages is already installed.

Example: How to install the tidyverse package: [Click here](https://youtu.be/tAGoThXF2Os)

Video about the rio package: [Click here](https://youtu.be/8N_5sR4s8XE)

`import()` would not work if the `rio` package were not loaded.  
`select()` would not work if the `tidyverse` package were not loaded.


```{webr}
library(rio);library(tidyverse)
DataHousing =
  import("Data/HousingData.csv") |> 
  select(Price=price, Sqft=sqft_living, Bedrooms=bedrooms,Waterfront=waterfront)
print(DataHousing[1:3,])
```


## Data Types & Data Objects {.smaller}

::: incremental
-   **Data Types:** Which type of values can R store?
    -   numerical `num`
    -   character `chr`
    -   `factor`
    -   `logic`
-   **Data Objects:** What are the **containers** R uses to store data?
    -   `single entry` single variable
    -   list of entries `vectors`
    -   table `dataframe` and `tibble`
    -   *advanced objects*. E.g., for plot, models, prediction results

:::

## Data Types  ðŸ¤“ {.smaller}

::: panel-tabset

### Main {.smaller}

**Numerical Data Type (`num`):** Numerical values (e.g., 1, 523, 3.45) are used for calculation. In contrast, ZIP-Codes are not numerical data type.

**Character Data Type (`chr`):** Storing sequence of characters, numbers, and/or symbols to form a word or even a sentence is called a `character` data type (e.g. first or last names, street addresses, or Zip-codes)

**Factor Data Type (`factor`):** A `factor` is an R data type that stores *categorical* data in an effective way. `factor` data types are also required by many classification models in R.

**Logic Data Type(`logic`):** A data type that stores the logic states `TRUE` and `FALSE` is called a `logic` object (sometimes called Boolean)

### Numerical {.smaller}

**Numerical Data Type (`num`):** Numerical values are used for calculations (therefore ZIP-Codes are not numerical). The numerical data type is `num` and in some cases `int` (full number). In most of the cases you do not have to differentiate between `int` and `num`.

```{webr}
A=1.23
str(A) # str() returns structure of a variable
B=2
str(2) # str() returns structure of a variable
C=as.integer(3)
str(C)
print(A*C)
print(C^B)
D=C/A # Returns num type
str(D)
```

### Character {.smaller}

**Character Data Type (`chr`) a.k.a Labels:**

Note that what is called a `character` in R is often called a *string* in other programming languages.

`character` data types must be surrounded by quotes:

```{webr}
MyText="Hello world!"
print(MyText)
```

Character variables can be concatenated with the `cat()` command:

```{webr}
FirstName="Carsten"
LastName="Lange"
cat(FirstName, LastName) # R adds a space automatically
```

### Factor {.smaller}

A `factor` is an R data type that stores **categorical** content. It is used to signal certain R commands that the variable is **categorical rather than character**.  
**Note,** some *R* commands recognize *categorical* variables automatically and a conversion to *factor* is not needed.  

```{webr}
People=data.frame(Name= c("John","Jane","Mia","Brid"),              
                  Sex=c("male","female","female","female"))
print(People)
```

***

***

Sex is a `character` variable in the dataset `People`

```{webr}
str(People$Sex)
```

***

***

Transforming the variable $Sex$ to a factor and looking at its structure (`str()`) again:

```{webr}
FactorSex=as.factor(People$Sex)
str(FactorSex)
```

### Logic {.smaller}

**Logic variables**: Store `TRUE` and `FALSE`. They can be combined with `and`/`or`. Internally `True` is stored as $1$ and `False` is stored as $0$

```{webr}
IsConcertGood=FALSE 
IsCompanyGood=TRUE
cat("Is the concert good?", IsConcertGood, "Is the company good?", IsCompanyGood)
```

```{webr}
IsEveningAmazing=IsConcertGood & IsCompanyGood
cat("Is the evening amazing?", IsEveningAmazing)
```

```{webr}
IsEveningGood=IsConcertGood | IsCompanyGood # | stands for "or"
cat("Is the evening good?", IsEveningGood)
```

```{webr}
IsConcertGood+IsCompanyGood+17
```

### Truth Table {.smaller}

```{webr}
#| echo: false
#| message: false
#| warning: false
library(kableExtra)
DataTruthTable=tribble(~A,~B,~"A&B",~"A|B",
                       T,T,T,T,
                       T,F,F,T,
                       F,T,F,T,
                       F,F,F,F)
kable(DataTruthTable, caption="Truth Table for AND and OR")|>
  add_header_above(c("R object A","R object B","A and B","A or B")) |> 
  kable_styling(bootstrap_options=c("striped","hover"), position="center", full_width = F)
```

:::

::: footer
See: [RandRStudioScriptPart1.R script200](https://econ.lange-analytics.com/RScripts/RAndRStudioScriptPart1.R){target="_blank"}
:::



## Print
Print `Hello world!` by using variable A:
```{webr}
A=@@@
print(@@@)
```

## Calculate with Variables and Output with `cat()`

A rectangular lot has a width of 200 feet (`Width`) and a length (`Length`) of 300 feet. Calculate the area (`Area`) and create a full sentence output.

```{webr}
@@@ = @@@
@@@ = @@@
@@@ = @@@ * @@@
cat("The area of the lot is", @@@, "square feet.")
```

## Exercise: `cat()` command and Single Value Objects with Different Data Types {.smaller}

Assign your own first and last name, your ZIP code, and your your age, to three character variables (first name, last name, Zip code) and one numerical variable (age). Use `var1`, `var2`, `var3`, `var4.` Afterward, use `Cat()` to output a sentence like `Carsten Lange is 55 years old and lives in ZIP code 92656` using the variables you had created.


```{webr}
Var1=@@@
Var2=@@@
Var3=@@@
Var4=@@@
  
cat(@@@, @@@, "is", @@@, "years old and lives in ZIP code", @@@)

```


## Data Types & Data Objects

<br><br>
**Data Types:** Which type of values can R store?
<br><br>
**Data Objects:** What are the containers R uses to store data?

## Data Objects 

-   **Single Value Object**
-   **Vector Object**
-   **Data Frame (Tibble) Object**
-   **List Object** (not covered in this course)
-   **Advanced Object** such as plots, models, recipes



## Single Value Object

Objects just store a single value:

```{webr}
A=1.5
B="beers is too much to drive?"
C=TRUE
cat(A, B, "Answer:", C)
```

## Vector-Objects {.smaller}

A vector object stores a list of values (numerical, character, factor, or logic; mixing of data types is not allowed)

Example: Weather during the last three days in Stattown:

```{webr}
#| echo: false
VecDay=c(1,2,3)
VecTemp=c(70, 68, 55)
VecWindSpeed=c("low","low","high")
VecIsSunny=c(TRUE,TRUE,FALSE)
```

```{webr}
VecDay=c(1,2,3)
VecTemp=c(70, 68, 55)
VecWindSpeed=c("low","low","high")
VecIsSunny=c(TRUE,TRUE,FALSE)
print("Four vectors successfully defined!")
```

<hr><hr>


Vector objects can be used as arguments for an R command to calculate statistics such as the `mean()` or the number of entries in the *vector* (`length()`):

```{webr}
MeanForecTemp=mean(VecTemp)
cat("The average forecasted temperature is", MeanForecTemp)
```

<hr><hr>

```{webr}
ForecDays=length(VecTemp)
cat("The forecast is for", ForecDays, "days.")
```

## Data Frames (tibbles) {.smaller}

A data frame is similar to an Excel table. **A data frame stores the values of R Vectors as variables entries in  its columns** .

Below we show how the **values from the four vectors** `VecDay`, `VecTemp`, `VecWindSpeed`, and `VevIsSunny` are stored in the *data frame* `DataWeather`.

The columns hold the values from the four vectors and the rows (with the exception of the first row), hold the observations for the various days. The first row contains the variable names:

```{webr}
DataWeather=data.frame(Day=c(1,2,3), Temp=c(70,68,55), 
                       WindSpeed=c("low","low","high"),
                       IsSunny=c(TRUE,TRUE,FALSE))
kable(DataWeather)
```



## Data Frame from Titanic Data {.smaller}

Most of the times, we do not build a *data frame* from its vectors (columns). Instead we load the *data frame* from a file (for example, a `csv` file.

Below we load the *Titanic* dataset. Note, not all columns of the *Titanic* data frame are used, and only the first twelve observations are shown.

```{webr}
library(rio)
DataTitanicSelVar=import("Data/Titanic.csv") |> 
  select(-Name, -SiblingsSpousesAboard, -ParentsChildrenAboard)
kable(DataTitanic[1:12,])
```

We can see the *structure* of the data frame by using the `str()` command. This includes the type of iths variables/vectors:

```{webr}
DataTitanic=import("Data/Titanic.csv")
str(DataTitanic)
```

## Extracting the Vectors and Performing Calculations (numerical Vectors) {.smaller}
Since the columns of a data frame are made up of *vectors*, we can extract these vectors, and use the values  for data analysis (remember: observations are in the rows, variables are in the columns).

We can use the  notation `DataFrameName$VectorName` to extract the vectors: 

```{webr}
VecFareInPounds=DataTitanic$FareInPounds
AvgFare=mean(VecFareInPounds)
cat("The average fare of Titanic passengers was:", AvgFare, "British Pounds")
```

## Extracting the Vectors and Performing Calculations (logical Vectors){.smaller}



```{webr}
SurvRate=mean(DataTitanic$Survived)
cat("The average survival rate of Titanic passengers was:", SurvRate)
```

We can also change a vector inside a data frame:

```{webr}
DataTitanic$Survived=as.logical(DataTitanic$Survived)
str(DataTitanic)
```
## Summary Data Types and Objects {background-color="#648787"}

![](Images/DataObjectDataTypes.png)



# The `tidyverse` and Piping



## Basics of R Commands {.smaller}

R commands consists of the **command's name followed by a pair of parentheses**: `command()`

. . .

Inside the `()` we can define one or more **arguments** for the command.

. . .

```{webr}
VecTest=c(1,2,3)
print(VecTest)
```

. . .

```{webr}
sum(x=VecTest)
mean(VecTest)
```

-   Arguments in a command usually have names such as `x=` or `data=`

-   R does not require to use the argument's name, but **order matters**

-   R commands have many arguments. Most have default values

-   We can nest commands. However, nesting too deeply makes code difficult to read.Â»



## Structure of R Commands {.smaller}

Most R commands have the following structure: \begin{equation}
\underbrace{DataNew}_{\text{R object storing the result}}=
\underbrace{Command}_{\text{Name of the command}}
\underbrace{(\overbrace{Data}^{\text{1. Argument: Data to process}},
\overbrace{Arg2, Arg3, \dots, ArgN}^{\text{More Arguments}})}_{\text{Arguments inside () and separated by komma}}
\end{equation}

Often the `data` argument is the first argument in a command. Usually named `data=` or `x=`.Â»

## Use a Command with and without Argument Names ðŸ¤“ {.smaller}

```{webr}
#| edit: false
VecTest=c(1,2,3)
```



```{webr}
Result=mean(x=VecTest, trim=0, na.rm=FALSE)
cat("The mean of the values in vector VecTest is:", Result)
```


. . .

```{webr}
Result=mean(VecTest, 0, FALSE)
cat("The mean of the values in vector VecTest is:", Result)
```



. . .

```{webr}
Result=mean(VecTest)
cat("The mean of the values in vector VecTest is:", Result)
```

. . .

All three examples are equivalent

Try `? mean` in the Rstudio console to see the default values.Â»

::: footer
See: [RandRStudioScriptPart2.R script100](https://econ.lange-analytics.com/RScripts/RAndRStudioScriptPart2.R){target="_blank"}
:::

## Important Commands from `tidyverse`/`dplyr` Package

-   `dplyr` package is part of the `tidyverse` (meta) package
-   `library(tidyverse)` (loads the `tidyverse` and its packages)
-   `select()` selects columns (variables) from a data frame
-   `filter()` filters rows (observations) for specific criteria
-   `mutate()` calculates new or overwrites existing columns (variables) based on other columns (just like Excel)
-   `arrange()` sorts a data frame  according to one or more colums in ascending order (use argumend `desc()` for descentig order)


## Titanic Dataset



```{webr}
library(rio)
DataTitanic=import("Data/Titanic.csv")
head(DataTitanic)
```


## The `select()` Command {.smaller}

-   `select(DataMine, Var1, Var2)` selects columns (variables) `Var1` and `Var2` from a data frame `DataMine`. The first argument is the `data=` argument followed by the names of the selected variables.

-   `select(DataMine, -Var1, -Var2)` selects all columns (variables) except `Var1` and `Var2` from a data frame `DataMine`.

. . .

Here is an example using the `DataTitanic` data frame from the previous slide:

```{webr}
#| echo: false
DataTitanicSelVar=select(DataTitanic, Survived, PasClass=Pclass , Sex, Age, FareInPounds)
```

```{webr}
library(tidyverse)
DataTitanicSelVar=select(DataTitanic, Survived,PasClass=Pclass,Sex,Age,FareInPounds)
head(DataTitanicSelVar)
```


## The `filter()` Command {.smaller}

The `filter()` command filters rows (observations) of a data frame for specific criteria. The first argument is the `data=` argument followed by the filter criteria.

. . .

E.g., *filter* for female passengers: <br>
We use `DataTitanicSelVar` that we created in the previous slide at as a starting dataframe and save the result in `DataTitanicSelVarFem`.<br>
**Note,** we have to use `==` instead of `=` for the criteria):

```{webr}
DataTitanicSelVarFem=filter(DataTitanicSelVar, Sex=="female")
head(DataTitanicSelVarFem)
```

```{webr} 
#| echo: false
DataTitanicSelVarFem=filter(DataTitanicSelVar, Sex=="female") 
# needed in case somebody start on next slide
```


## The `mutate()` Command ðŸ¤“ {.smaller}

`mutate()` creates or overwrites columns (variables) based on other columns (just like Excel). The first argument is the `data=` argument followed by the instructions on how to create the new variable.

. . .

E.g., *mutate* calculates the `FareIn2021Dollars` by multiplying `FareInPounds` by $164.1.  
The command uses `DataTitanicSelVarFem` from the previous slide:

```{webr}
DataTitatincSelVarFemDolFare=mutate(DataTitanicSelVarFem,
                                    FareIn2021Dollars=164.1*FareInPounds, 
                                    FareInPounds=NULL)
head(DataTitatincSelVarFemDolFare)
```



::: footer
See: [RandRStudioScriptPart2.R script200](https://econ.lange-analytics.com/RScripts/RAndRStudioScriptPart2.R){target="_blank"}
:::


## Summary {.smaller}

We now have a data frame with only women and columns $Survived$, $PasClass$, $Sex$, $Age$, and $FareIn2021Dollas$.

How did we get there:

1.  We selected variables $Survived$, $PasClass$, $Sex$, $Age$, $FareInPounds$ and saved in `DataTitanicSelVar`
2.  We filtered for females and saved in `DataTitanicSelVarFem`
3.  We mutated to calculate  a new variable $FareIn2021Dollas$ and saved finally in `DataTitatincSelVarFemDolFare`

. . .

Could this be done easier?

Note, overwriting data frames such as `DataTitanic` is usually a bad idea!

## Alternative: Nesting {.smaller}

#### (I am not serious)

```{webr}
library(tidyverse)
DataTitanicFinal = mutate(
                   filter(select(DataTitanic, Survived, PasClass=Pclass , 
                                 Sex, PasClass, FareInPounds), Sex=="female"), 
                   FareIn2021Dollars=164.1*FareInPounds,                   
                   FareInPounds=NULL)
head(DataTitanicFinal)
```

## Piping Schema {background-color="#648787"}

![Piping Schema](Images/Piping.png){background-color="aquamarine" fig-alt="Piping Schema" fig-align="center"}

## Alternative: Piping

#### (will be used throughout the course/book) ðŸ¤“

```{webr}
library(tidyverse)
DataTitanicFinal=DataTitanic |> 
                 select(Survived, PasClass=Pclass , Sex, Age, FareInPounds) |> 
                 filter(Sex=="female") |> 
                 mutate(FareIn2021Dollars=164.1*FareInPounds, FareInPounds=NULL)
head(DataTitanicFinal)
```


::: footer
See: [RandRStudioScriptPart2.R script300](https://econ.lange-analytics.com/RScripts/RAndRStudioScriptPart2.R){target="_blank"}
:::

## Python vs. R --- The task

Let us compare  code for the same tasks between  *R* and *Python*:  


- Download the Titanic dataset 

- select the variables `Sex`, `FareInPounds`, `Survived` (renamed to: `Surv`)

- Calculate a new column `FareInDollars` by multiplying `FareInPounds` by $164.5$

- Filter for `Sex` beeing *female*

- Calculate the mean of `FareInDollars` 

## Python vs. R --- The Results (using pandas) {.smaller}

```{r}
#| echo: true
library(tidyverse); library(rio)
DataTitanicR=import("Data/Titanic.csv") |> 
            select(Sex, FareInPounds, Surv = Survived) |> 
            mutate(FareInDollars = FareInPounds*164.5) |> 
            filter(Sex=="female")
MeanFareWomen=mean(DataTitanicR$FareInDollars)
print(MeanFareWomen)
```

```{pyodide}
import pandas as pd
DataTitanicPy=pd.read_csv("Data/Titanic.csv") 
DataTitanicPy=DataTitanicPy[["Sex", "FareInPounds", "Survived"]] \
            .rename(columns={"Survived": "Surv"}) \
            .assign(FareInDollars = DataTitanicPy["FareInPounds"] * 164.5) \
            .query("Sex=='female'")
MeanFareWomen=DataTitanicPy["FareInDollars"].mean()
print(MeanFareWomen)            
```

## Python vs. R --- The Results (using polars){.smaller}

```{r}
#| echo: true
library(tidyverse); library(rio)
DataTitanicR=import("Data/Titanic.csv") |> 
            select(Sex, FareInPounds, Surv = Survived) |> 
            mutate(FareInDollars = FareInPounds*164.5) |> 
            filter(Sex=="female")
MeanFareWomen=mean(DataTitanicR$FareInDollars)
print(MeanFareWomen)
```

```{pyodide}
import polars as pl
DataTitanicPy=pl.read_csv("Data/Titanic.csv", infer_schema_length=None) \
            .select(pl.col("Survived").alias("Surv"), pl.col("Sex"), pl.col("FareInPounds"),
                   (pl.col("FareInPounds")*164.5).alias("FareInDollars")) \
            .filter(pl.col("Sex") == "female")
MeanFareWomen=DataTitanicPy["FareInDollars"].mean()
print(MeanFareWomen)     
```



## Was Chivary Dead in 1912?

To answer the question, we develop a male and a female data frame and compare the survival rates.

In each data frame we would need only the variables `Sex` and `Survived` but we add also `PasClass` for additional analysis.

## The Male Data Frame

We select `Sex`,  `Survived`, and `PasClass=Pclass` and filter for `male`:

```{webr}
#| echo: false
DataMale=DataTitanic |> 
         select(Sex,  Survived, PasClass=Pclass) |> 
         filter(Sex=="male")
```

```{webr}
DataMale = DataTitanic |> 
           select(@@@) |> 
           filter(@@@)
head(DataMale)
```


## The Female Data Frame

We select `Sex`,  `Survived`, and `PasClass=Pclass` and filter for `female`:

```{webr}
#| echo: false
DataFemale=DataTitanic |> 
           select(Sex,  Survived, PasClass=Pclass) |> 
           filter(Sex=="female")
```

```{webr}
DataFemale = DataTitanic |> 
             select(@@@) |> 
             filter(@@@)
head(DataFemale)
```

## Comparing the Survival Proportion of Males to Females

**Hint:** You could either calculate the female proportion as `sum(DataFemale$Survived/nrow(DataFemale))` or `mean(DataFemale$Survived)`.
```{webr}
PropFemSurv = @@@
PropMaleSurv = @@@
cat(@@@, @@@)
cat(@@@, @@@)
```

## Be critical with your own research {.smaller}
### `PasClass` is a Confounder

The third class was deep in the hull of the Titanic with low survival chances and more men were traveling in that class. This makes `PasClass` a confounder. Therefore we have to analyse male and female survival by class: We have to filter for `Sex` and `PasClass`.

```{r}
library(ggdag)
library(ggplot2)
set.seed(123)
dagify(
  Survived ~ Sex + PClass,
  Sex ~ PClass,
  exposure = "Sex",
  outcome = "Survived"
)|> 
ggdag_status(node_size = 22) + theme_void()
```






## Survival Research for Passenger Class 1 
- Select `Survived`, `Sex`, `PasClass=Pclass`
- Filter for `PasClass` and `Sex` (`female` and `male`)

```{webr}
DataFemaleClass1=DataTitanic |> 
                 select(@@@, @@@, PasClass=Pclass) |> 
                 filter(@@@) |> 
                 filter(@@@)
DataMaleClass1=DataTitanic |> 
               select(@@@, @@@, PasClass=Pclass) |> 
               filter(@@@) |> 
               filter(@@@)
cat(" Female Survival Poportion in Class 1:", mean(DataFemaleClass1$Survived), "\n",
    "Male Survival Poportion in Class 1:", mean(DataMaleClass1$Survived))
```

## Survival Research for Passenger Class 2 

- Select `Survived`, `Sex`, `PasClass=Pclass`
- Filter for `PasClass` and `Sex` (`female` and `male`)

```{webr}
DataFemaleClass2=DataTitanic |> 
                 select(@@@, @@@, PasClass=Pclass) |> 
                 filter(@@@) |> 
                 filter(@@@)
DataMaleClass2=DataTitanic |> 
               select(@@@, @@@, PasClass=Pclass) |> 
               filter(@@@) |> 
               filter(@@@)
cat(" Female Survival Poportion in Class 2:", mean(DataFemaleClass2$Survived), "\n",
    "Male Survival Poportion in Class 2:", mean(DataMaleClass2$Survived))
```

## Survival Research for Passenger Class 3 

- Select `Survived`, `Sex`, `PasClass=Pclass`
- Filter for `PasClass` and `Sex` (`female` and `male`)

```{webr}
DataFemaleClass3=DataTitanic |> 
                 select(@@@, @@@, PasClass=Pclass) |> 
                 filter(@@@) |> 
                 filter(@@@)
DataMaleClass3=DataTitanic |> 
               select(@@@, @@@, PasClass=Pclass) |> 
               filter(@@@) |> 
               filter(@@@)
cat(" Female Survival Poportion in Class 3:", mean(DataFemaleClass3$Survived), "\n",
    "Male Survival Poportion in Class 3:", mean(DataMaleClass3$Survived))
```