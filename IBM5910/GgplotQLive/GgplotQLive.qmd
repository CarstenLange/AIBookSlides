---
title: "The Grammar of Graphics for Creating Graphs"
author:
  name: "Carsten Lange"
  email: "clange@cpp.edu"
  affiliation: "Cal Poly, Pomona"

format: 
  live-revealjs:
    theme: [moon,../../CustomCL.scss]
    smaller: true
    controls: true
    chalkboard:
      theme: whiteboard
      boardmarker-width: 2.7
    incremental: false
    scrollable: true
    footer: "<a href='https://ggplot2-book.org/getting-started.html'>Textbook </a> "
  
webr:
  packages:
    - tidyverse
    - rio
    - palmerpenguins
    - TeachHist

engine: knitr 
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}

## Generating Data

```{webr}
#| echo: false

library(palmerpenguins)

DataWebPurch=penguins |> 
       select(Conversions=flipper_length_mm, Treatment=species,
              Purchases=bill_depth_mm, 
              Revenue=bill_length_mm) |> 
              drop_na() |> 
              mutate(Purchases=round(Purchases),
                     Revenue=Revenue*100)
              
levels(DataWebPurch$Treatment)=c("Control", "Audio", "Video")
```

```{webr}
library(tidyverse)
library(palmerpenguins)

DataWebPurch=penguins |> 
       select(Conversions=flipper_length_mm, Treatment=species,
              Purchases=bill_depth_mm, 
              Revenue=bill_length_mm) |> 
              drop_na() |> 
              mutate(Purchases=round(Purchases),
                     Revenue=Revenue*100)
              
levels(DataWebPurch$Treatment)=c("Control", "Audio", "Video")
set.seed(111)
kable(slice_sample(DataWebPurch, n=6))
```

## Grammar of Graphics



1. **Data and Aesthetics (Visuals)**  
   Mappings  between data variables and visual properties. E.g., `x`, `y`, `color`, `size`, `shape`  
   (assigning data to *Aesthetics*)



3. **Geoms (Geometric Objects)**  
   The shapes drawn (points, lines, bars, boxplots...).  
   
4. **Scales**  
   Rules that translate data values into visual values  
   (numbers → positions, categories/numbers → colors or color scales, etc.).  
9. **Annotations**  
   Extra information layered on top of the plot.  
   - Titles, subtitles, captions (`labs(title = ...)`)  
   - Labels, reference lines (`geom_text()`, `geom_hline()`)  
   - Custom notes
   
5. **Stats (statistical transformations)**  
   Optional transformations applied before drawing geoms.  
   - Example: `geom_histogram()` uses `stat_bin()` to compute counts.  
   - Example: `geom_smooth()` uses `stat_smooth()` to fit a regression line.
   
  

6. **Coordinates (coordinate systems)**  
   How the plot space is drawn.  
   - Cartesian (default), polar (`coord_polar()`), flipped (`coord_flip()`), maps, etc.  

7. **Facets**  (Trick to add another dimension)
   Splitting data into multiple small plots (e.g., `facet_wrap(~gender)`).  

8. **Themes**  
   Non–data elements: fonts, grid lines, background, legend placement, axis styling.  



##  Step 1: Mapping Variables to Aestetics: ggplot(){.smaller}

Aesthetics: Are the visual elements of a diagram

At this stage, you are just saying: “this data column is assigned (mapped) to  this visual property.”

```{webr}
ggplot(DataWebPurch, mapping = aes(x=Purchases, y=Revenue))
```

##  Step 2: Choosing Geometric Objects: geom_xxx()

Examples:

- geom_point() → draws points (scatter plots)
- geom_line() → draws lines (time series, trends)
- geom_bar() → draws bars (histograms, bar charts)
- geom_smooth → draws a smooth line representation of point data
- geom_histogram() → draws histogram bins
- geom_boxplot() → draws box-and-whisker plots

##  Step 2: Choosing Geometric Objects: geom_point()


```{webr}
ggplot(DataWebPurch, mapping = aes(x=Purchases, y=Revenue))+
  geom_point()
```

##  Step 2: Choosing Geometric Objects: geom_point(color="red")

```{webr}
ggplot(DataWebPurch, mapping = aes(x=Purchases, y=Revenue))+
  geom_point(color="red", size=3, shape = "*")
```


## Back to Step 1: Adding additional Data to Aesteics (3 Dimension)

```{webr}
ggplot(DataWebPurch, mapping = aes(x=Purchases, y=Revenue, color=Treatment))+
  geom_point()
```
## Back to Step 2: Adding Another GEOM (3 trend lines)

```{webr}
#| message: false
#| warning: false
ggplot(DataWebPurch, aes(x=Purchases, y=Revenue, color = Treatment)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE)
```



## Back to Step 2: Adding Another GEOM? Solution 1  (1 trend line)

```{webr}
#| warning: false
#| message: false
ggplot(DataWebPurch, aes(Purchases, Revenue, color = Treatment)) +
geom_point() +
geom_smooth(aes(x=Purchases, y=Revenue),
              method = "lm", se = FALSE,
              inherit.aes = FALSE) # possibly adding , color = "black"
```

## Back to Step 2: Adding Another GEOM? Solution 2  (1 trend lines)

```{webr}
#| warning: false
#| message: false
ggplot(DataWebPurch, aes(Purchases, Revenue, color = Treatment)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "black")
```

## Back to Step 2: Adding Another GEOM? Best Solution (1 trend lines)

```{webr}
#| warning: false
#| message: false
ggplot(DataWebPurch, mapping=aes(x=Purchases, y=Revenue)) +
geom_point(mapping=aes(color = Treatment)) +
geom_smooth(method = "lm", se = FALSE) # possibly add color="black
```

## Back to Step 2: Adding Two GEOMs? Cool Solution (1 +3 trend lines; Simpson’s Paradox)

```{webr}
#| warning: false
#| message: false
ggplot(DataWebPurch, mapping=aes(x=Purchases, y=Revenue)) +
geom_point(mapping=aes(color = Treatment)) +
geom_smooth(method = "lm", se = FALSE, color="black") +
geom_smooth(aes(color = Treatment), method = "lm", se = FALSE)
```

## Back to Step 2: Adding too Many GEOMs? --- Convoluted

```{webr}
#| warning: false
#| message: false
DataMeans=DataWebPurch %>%
    group_by(Treatment) %>%
    summarise(RevMean = mean(Revenue),
              PurchMean=mean(Purchases))

ggplot(DataWebPurch, mapping=aes(x=Purchases,                                     y=Revenue)) +
geom_point(mapping=aes(color = Treatment)) +
geom_smooth(method = "lm", se = FALSE, color="black") +
geom_smooth(aes(color = Treatment), method = "lm", se = FALSE)+
  geom_vline(xintercept = DataMeans$PurchMean[1],              color="red")+
  geom_vline(xintercept = DataMeans$PurchMean[2],              color="green")+
  geom_vline(xintercept = DataMeans$PurchMean[3],              color="blue")+
  geom_hline(yintercept = DataMeans$RevMean[1],              color="red")+
  geom_hline(yintercept = DataMeans$RevMean[2],              color="green")+
  geom_hline(yintercept = DataMeans$RevMean[3],              color="blue")
```

## Step 3: Scaling `x`-axis and `y`-axis 

```{webr}
#| warning: false
#| message: false
ggplot(DataWebPurch, mapping=aes(x=Purchases, y=Revenue)) +
geom_point(mapping=aes(color = Treatment)) +
geom_smooth(aes(color = Treatment), method = "lm", se = FALSE)
```

## Step 3: Scaling `x`-axis and `y`-axis 

```{webr}
#| warning: false
#| message: false
ggplot(DataWebPurch, mapping=aes(x=Purchases, y=Revenue)) +
geom_point(mapping=aes(color = Treatment)) +
geom_smooth(aes(color = Treatment), method = "lm", se = FALSE)+
scale_x_continuous(limits = c(12,24), breaks = seq(12,24,1), 
                   minor_breaks = seq(12,24,1) )+
scale_y_continuous(limits = c(3000,6000), breaks = seq(3000,6000,500), 
                   minor_breaks = seq(3000,6000,250) )

```

## Step 4: Adding Labels with `lab()`

```{webr}
#| warning: false
#| message: false
ggplot(DataWebPurch, mapping=aes(x=Purchases, y=Revenue)) +
geom_point(mapping=aes(color = Treatment)) +
geom_smooth(mapping=aes(color = Treatment), method = "lm", se = FALSE)+
scale_x_continuous(limits = c(12,24), breaks = seq(12,24,1), 
                   minor_breaks = seq(12,24,1) )+
scale_y_continuous(limits = c(3000,6000), breaks = seq(3000,6000,500), 
                   minor_breaks = seq(3000,6000,250) )+
labs(
  title = "Differnt Web Designs",
  subtitle = "Daily Data, 2024",
  caption = "Palmer Penguins",
  x = "Purchases per Day",
  y = "Revenue in US$"
)
```

## Bar Chart and Column Chart

These charts have a categorical variable as the x-axis possibly encoded as a `factor`.

- A Bar chart has counts (or count related), pseudo-continuous  y-axis

- A Col chart displays predetermined continuous variable on the y-axis

## Bar Chart

```{webr}
ggplot(DataWebPurch, mapping=aes(x=Treatment, fill=Treatment))+
geom_bar()+
scale_fill_viridis_d(option="magma")
```

## Col Chart (with Assessible Colors)

```{webr}
# Summarize by Treatment
DataWebPurchMeans <- DataWebPurch |> 
  group_by(Treatment) |> 
  summarise(
    MeanRevenue = mean(Revenue)
  )
kable(DataWebPurchMeans)
```

## Plot MeanRevenue by Treatment
```{webr}
ggplot(DataWebPurchMeans, aes(x = Treatment, y = MeanRevenue, fill = Treatment)) +
  geom_col() +
  scale_fill_manual(values = c("red","green","blue")) +
  labs(
    title = "Mean Revenue by Treatment",
    x = "Treatment",
    y = "Mean Revenue"
  )


```

## Histogram ggplot

```{webr}
#| warning: false
#| message: false
ggplot(DataWebPurch, aes(x = Revenue)) +
  geom_histogram(binwidth = 300, fill="red", color="black")
```
## Histogram-Count with `TeachHistCount`

```{webr}
TeachHistCounts(PlotData=DataWebPurch["Revenue"], VLine1=4938, PrintZAxis = FALSE)
```

## Histogram - Relative Frequecies with `TeachHistRelFreq`

```{webr}
TeachHistRelFreq(PlotData=DataWebPurch["Revenue"],  VLine1=4938, PrintZAxis = FALSE)
```

## Histogram - Densities with `TeachHistDens`

```{webr}
TeachHistDens(PlotData=DataWebPurch["Revenue"], VLine1=4938, PrintZAxis = FALSE)
```

## Histogram - Densities with TeachHistDens

```{webr}
TeachHistDens(PlotData=DataWebPurch["Revenue"], VLine1=4938, PrintZAxis = FALSE)
```

```{webr}
MeanRev=mean(DataWebPurch$Revenue)
StdRev=sd(DataWebPurch$Revenue)
cat("Mean:", MeanRev)
cat("Stand. Dev.:", StdRev)
cat("Prob. Rev.<4938: ", pnorm(4938, MeanRev, StdRev))
```

